- name: clone/pull repository
  git:
    repo: "{{ server_git_url }}"
    version: "{{ branch }}"
    dest: "{{ server_root_dir }}"

    # If the repository is too big, you could uncomment the next line:
    # depth: 1    # Download last commit only.
    # This gives a shallow repository. To obtain a full one, run:
    #     git remote set-branches origin "*" && git fetch --unshallow

  # Bitbucket is sometimes flaky so:
  register: git_result
  retries: 2
  delay: 5
  until: git_result is succeeded

- name: backup DB
  vars:
    dumps_folder: db_dumps
  block:
    - name: create dumps folder
      file:
        path: "{{ dumps_folder }}"
        state: directory

    # Skip dump only if this task says DB doesn't exist and didn't fail,
    # to avoid going on without backup in case DB exists but dump failed.
    - name: check if DB exists
      shell: |
        if command -v psql >/dev/null; then
          psql --tuples-only --no-align \
            --command="SELECT 1 FROM pg_database \
              WHERE datname={{ ((project_name | quote) == project_name) | ternary("'" + project_name + "'", project_name | quote) }}"
              # Bobby Tables handling mess...
        fi
      register: db_exists

    - name: non-existent DB message
      debug:
        msg: Database {{ project_name }} doesn't exist, skipping backup.
      when: db_exists.stdout != '1'

    - name: dump DB
      postgresql_db:
        name: "{{ project_name }}"
        state: dump
        target: "{{ dumps_folder }}/{{ '%Y-%m-%d-%H-%M-%S' | strftime(ansible_date_time.epoch) }}.dump"
        target_opts: --format=custom  # same as -Fc
        login_user: "{{ ansible_user }}"
      when: db_exists.stdout == '1'
  when: git_result.changed


# TODO: also restart service later
